{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["STATUS_MAP","App","props","renderFile","fileObj","ExcelRenderer","err","resp","console","log","setState","dataLoaded","cols","rows","fileHandler","event","target","files","length","fileName","name","slice","lastIndexOf","uploadedFileName","isFormInvalid","state","isOpen","filter","bind","fileInput","React","createRef","value","index","self","indexOf","object","map","item","this","onlyUnique","str","filterText","className","for","class","id","type","onChange","ref","onClick","handleFilterChagne","getUniqueItems","catagory","it","statusTagPicker","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67ffcddb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.scss';\nimport { ExcelRenderer } from 'react-excel-renderer';\n\nconst STATUS_MAP = {\n  shipped: '21-Q1',\n  comingSoon: '21-Q2',\n  inTheWorks: '21-Q3',\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n      dataLoaded: false,\n      isFormInvalid: false,\n      rows: null,\n      cols: null,\n      filter: ''\n    }\n    this.fileHandler = this.fileHandler.bind(this);\n    this.renderFile = this.renderFile.bind(this);\n    this.fileInput = React.createRef();\n  }\n\n  renderFile = (fileObj) => {\n    //just pass the fileObj as parameter\n    ExcelRenderer(fileObj, (err, resp) => {\n      if (err) {\n        console.log(err);\n      }\n      else {\n        this.setState({\n          dataLoaded: true,\n          cols: resp.cols,\n          rows: resp.rows\n        });\n      }\n    });\n  }\n\n  fileHandler = (event) => {\n    if (event.target.files.length) {\n      let fileObj = event.target.files[0];\n      let fileName = fileObj.name;\n\n      //check for file extension and pass only if it is .xlsx and display error message otherwise\n      if (fileName.slice(fileName.lastIndexOf('.') + 1) === \"xlsx\") {\n        this.setState({\n          uploadedFileName: fileName,\n          isFormInvalid: false\n        });\n        this.renderFile(fileObj)\n      }\n      else {\n        this.setState({\n          isFormInvalid: true,\n          uploadedFileName: \"\"\n        })\n      }\n    }\n  }\n\n  onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n  }\n\n  getUniqueItems(object) {\n    return object.map((item) => { return item[0] }).slice(1).filter(this.onlyUnique);\n  }\n\n  statusTagPicker(str) {\n    if (str == STATUS_MAP.shipped)\n      return 'Shipped';\n    else if (str == STATUS_MAP.comingSoon)\n      return 'ComingSoon';\n    else if (str == STATUS_MAP.inTheWorks)\n      return 'InTheWorks';\n    else\n      return '';\n  }\n\n  handleFilterChagne(filterText) {\n    this.setState({\n      filter: filterText\n    });\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <div className='header'>\n          <div className='logo'></div>\n          <h1>ConnectWise Roadmap</h1>\n          <p>Please upload an excel file here to view roadmap.</p>\n          <label for=\"file-upload\" class=\"custom-file-upload\">Upload Excel</label>\n          <input id=\"file-upload\" type=\"file\" onChange={this.fileHandler.bind(this)} ref={this.fileInput} onClick={(event) => { event.target.value = null }} />\n        </div>\n        {this.state.dataLoaded &&\n          <div className='contentPanel'>\n            <div className='statusFilter'>\n              <h4>Stauts:</h4>\n              <button onClick={() => this.handleFilterChagne('')} className={this.state.filter == '' ? 'selected' : ''}>All</button>\n              <button onClick={() => this.handleFilterChagne(STATUS_MAP.shipped)} className={this.state.filter == STATUS_MAP.shipped ? 'selected' : ''}>Shipped</button>\n              <button onClick={() => this.handleFilterChagne(STATUS_MAP.comingSoon)} className={this.state.filter == STATUS_MAP.comingSoon ? 'selected' : ''}>Coming soon</button>\n              <button onClick={() => this.handleFilterChagne(STATUS_MAP.inTheWorks)} className={this.state.filter == STATUS_MAP.inTheWorks ? 'selected' : ''}>In the works</button>\n            </div>\n            {\n              this.getUniqueItems(this.state.rows).map(catagory => {\n                return <div className='catagory'>\n                  <h2>{catagory}</h2>\n                  {this.state.rows.filter((item) => { return item[0] === catagory }).filter((item) => { return this.state.filter ? item[2] === this.state.filter : true }).map((it) => {\n                    return <div className='item'>\n                      <span className={'is' + this.statusTagPicker(it[2])}>{it[2]}</span>\n                      <span className='shipped'>SHIPPED</span>\n                      <span className='comingSoon'>COMING SOON</span>\n                      <span className='inTheWorks'>IN THE WORKS</span>\n                      <h4>{it[1]}</h4>\n                      <p>{it[3]}</p>\n                    </div>\n                  })}\n                  <p className='emptyStateText'>No item in this catagory</p>\n                </div>\n              })\n            }\n          </div>}\n        {!this.state.dataLoaded &&\n          <div className='emptyState'>\n          </div>}\n        <div className='footer'>\n          <p>Copyright Â© 2021 ConnectWise</p>\n          <span>Build by Meng Huang</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}