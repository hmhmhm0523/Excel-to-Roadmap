{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","renderFile","fileObj","ExcelRenderer","err","resp","console","log","Object","entries","rows","table","setState","dataLoaded","cols","fileHandler","event","target","files","length","fileName","name","slice","lastIndexOf","uploadedFileName","isFormInvalid","state","isOpen","bind","toggle","fileInput","React","createRef","this","value","index","self","indexOf","type","onChange","ref","onClick","map","item","key","data","columns","tableClassName","tableHeaderRowClass","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAmGeA,E,kDA9Fb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAcRC,WAAa,SAACC,GAEZC,wBAAcD,GAAS,SAACE,EAAKC,GACvBD,EACFE,QAAQC,IAAIH,IAGZE,QAAQC,IAAIC,OAAOC,QAAQJ,EAAKK,OAChCJ,QAAQK,MAAMN,EAAKK,MACnB,EAAKE,SAAS,CACZC,YAAY,EACZC,KAAMT,EAAKS,KACXJ,KAAML,EAAKK,YA3BA,EAiCnBK,YAAc,SAACC,GACb,GAAIA,EAAMC,OAAOC,MAAMC,OAAQ,CAC7B,IAAIjB,EAAUc,EAAMC,OAAOC,MAAM,GAC7BE,EAAWlB,EAAQmB,KAI+B,SAAlDD,EAASE,MAAMF,EAASG,YAAY,KAAO,IAC7C,EAAKX,SAAS,CACZY,iBAAkBJ,EAClBK,eAAe,IAEjB,EAAKxB,WAAWC,IAGhB,EAAKU,SAAS,CACZa,eAAe,EACfD,iBAAkB,OAhDxB,EAAKE,MAAQ,CACXC,QAAQ,EACRd,YAAY,EACZY,eAAe,EACff,KAAM,KACNI,KAAM,MAER,EAAKC,YAAc,EAAKA,YAAYa,KAAjB,gBACnB,EAAKC,OAAS,EAAKA,OAAOD,KAAZ,gBACd,EAAK3B,WAAa,EAAKA,WAAW2B,KAAhB,gBAClB,EAAKE,UAAYC,IAAMC,YAZN,E,0CAwDnB,WACEC,KAAKrB,SAAS,CACZe,QAASM,KAAKP,MAAMC,W,wBAKxB,SAAWO,EAAOC,EAAOC,GACvB,OAAOA,EAAKC,QAAQH,KAAWC,I,oBAGnC,WACE,OACE,gCACI,uBAAOG,KAAK,OAAOC,SAAUN,KAAKlB,YAAYa,KAAKK,MAAOO,IAAKP,KAAKH,UAAWW,QAAS,SAACzB,GAAYA,EAAMC,OAAOiB,MAAQ,QACzHD,KAAKP,MAAMb,YACV,gCAEE,8BAAK,6BAGDoB,KAAKP,MAAMhB,KAAKgC,KAAI,SAACC,EAAMC,GACzB,OAAO,+BACL,6BAAKD,EAAK,KACV,6BAAKA,EAAK,KACV,+BAAOA,EAAK,KACZ,4BAAIA,EAAK,OAJKC,UAStB,cAAC,WAAD,CAAUC,KAAMZ,KAAKP,MAAMhB,KAAMoC,QAASb,KAAKP,MAAMZ,KAAMiC,eAAe,iBAAiBC,oBAAoB,sB,GAxFzGC,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4eca604a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { OutTable, ExcelRenderer } from 'react-excel-renderer';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n      dataLoaded: false,\n      isFormInvalid: false,\n      rows: null,\n      cols: null\n    }\n    this.fileHandler = this.fileHandler.bind(this);\n    this.toggle = this.toggle.bind(this);\n    this.renderFile = this.renderFile.bind(this);\n    this.fileInput = React.createRef();\n  }\n\n  renderFile = (fileObj) => {\n    //just pass the fileObj as parameter\n    ExcelRenderer(fileObj, (err, resp) => {\n      if (err) {\n        console.log(err);\n      }\n      else {\n        console.log(Object.entries(resp.rows))\n        console.table(resp.rows)\n        this.setState({\n          dataLoaded: true,\n          cols: resp.cols,\n          rows: resp.rows\n        });\n      }\n    });\n  }\n\n  fileHandler = (event) => {\n    if (event.target.files.length) {\n      let fileObj = event.target.files[0];\n      let fileName = fileObj.name;\n\n\n      //check for file extension and pass only if it is .xlsx and display error message otherwise\n      if (fileName.slice(fileName.lastIndexOf('.') + 1) === \"xlsx\") {\n        this.setState({\n          uploadedFileName: fileName,\n          isFormInvalid: false\n        });\n        this.renderFile(fileObj)\n      }\n      else {\n        this.setState({\n          isFormInvalid: true,\n          uploadedFileName: \"\"\n        })\n      }\n    }\n  }\n\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  \n  onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n  }\n\nrender() {\n  return (\n    <div>\n        <input type=\"file\" onChange={this.fileHandler.bind(this)} ref={this.fileInput} onClick={(event) => { event.target.value = null }} />\n        {this.state.dataLoaded &&\n          <div>\n\n            <div><ul>\n              {\n               \n                this.state.rows.map((item, key) => {\n                  return <li key={key}>\n                    <h3>{item[0]}</h3>\n                    <h4>{item[1]}</h4>\n                    <span>{item[2]}</span>\n                    <p>{item[3]}</p>\n                  </li>\n                })\n              }\n            </ul></div>\n            <OutTable data={this.state.rows} columns={this.state.cols} tableClassName=\"ExcelTable2007\" tableHeaderRowClass=\"heading\" />\n          </div>}\n    </div>\n  );\n}\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}